syntax = "proto3";

package tss.v1;

option go_package = "github.com/dreamer-zq/DKNet/proto/tss/v1;tssv1";

import "google/protobuf/timestamp.proto";

// TSS service provides threshold signature scheme operations
service TSSService {
    // StartKeygen starts a new key generation operation
    rpc StartKeygen(StartKeygenRequest) returns (StartKeygenResponse);
    
    // StartSigning starts a new signing operation
    rpc StartSigning(StartSigningRequest) returns (StartSigningResponse);
    
    // StartResharing starts a new resharing operation
    rpc StartResharing(StartResharingRequest) returns (StartResharingResponse);
    
    // GetOperation gets the status and result of an operation
    rpc GetOperation(GetOperationRequest) returns (GetOperationResponse);

    rpc GetKeyMetadata(GetKeyMetadataRequest) returns (GetKeyMetadataResponse);
}

// Operation status enumeration
enum OperationStatus {
    OPERATION_STATUS_UNSPECIFIED = 0;
    OPERATION_STATUS_PENDING = 1;
    OPERATION_STATUS_IN_PROGRESS = 2;
    OPERATION_STATUS_COMPLETED = 3;  
    OPERATION_STATUS_FAILED = 4;
    OPERATION_STATUS_CANCELED = 5;
}

// Operation type enumeration
enum OperationType {
    OPERATION_TYPE_UNSPECIFIED = 0;
    OPERATION_TYPE_KEYGEN = 1;
    OPERATION_TYPE_SIGNING = 2;
    OPERATION_TYPE_RESHARING = 3;
}

// StartKeygenRequest represents a key generation request
message StartKeygenRequest {
    // Optional operation ID provided by client for idempotency
    string operation_id = 1;
    
    // Fault tolerance threshold (t in (t+1)-of-n scheme)
    // Max number of parties that can fail. Minimum signers required = t+1
    int32 threshold = 2;
    
    // List of participant peer IDs (n = len(participants))
    repeated string participants = 3;
}

// StartKeygenResponse represents the response when starting keygen operation
message StartKeygenResponse {
    // Unique operation identifier
    string operation_id = 1;
    
    // Current status of the operation
    OperationStatus status = 2;
    
    // Timestamp when operation was created
    google.protobuf.Timestamp created_at = 3;
}

// KeygenResult represents the result of key generation
message KeygenResult {
    // Generated public key in hex format
    string public_key = 1;
    
    // Unique identifier for the generated key
    string key_id = 2;
}

// StartSigningRequest represents a signing request
message StartSigningRequest {
    // Optional operation ID provided by client for idempotency
    string operation_id = 1;
    
    // Message to be signed (bytes)
    bytes message = 2;
    
    // Key ID to use for signing
    string key_id = 3;
    
    // List of participant peer IDs
    repeated string participants = 4;
}

// StartSigningResponse represents the response when starting signing operation
message StartSigningResponse {
    // Unique operation identifier
    string operation_id = 1;
    
    // Current status of the operation
    OperationStatus status = 2;
    
    // Timestamp when operation was created
    google.protobuf.Timestamp created_at = 3;
}

// SigningResult represents the result of signing operation
message SigningResult {
    // Complete signature in hex format
    string signature = 1;
    
    // R component of the signature
    string r = 2;
    
    // S component of the signature  
    string s = 3;
    
    // V component (recovery ID) for Ethereum compatibility
    int32 v = 4;
}

// StartResharingRequest represents a resharing request
message StartResharingRequest {
    // Optional operation ID provided by client for idempotency
    string operation_id = 1;
    
    // Key ID to reshare
    string key_id = 2;
    
    // New fault tolerance threshold (t in (t+1)-of-n scheme)
    int32 new_threshold = 3;
    
    // List of new participant peer IDs (new_parties = len(new_participants))
    repeated string new_participants = 4;
}

// StartResharingResponse represents the response when starting resharing operation
message StartResharingResponse {
    // Unique operation identifier
    string operation_id = 1;
    
    // Current status of the operation
    OperationStatus status = 2;
    
    // Timestamp when operation was created
    google.protobuf.Timestamp created_at = 3;
}

// GetKeyMetadataRequest represents a request to get key metadata

message GetKeyMetadataRequest {
    // Key ID to query
    string key_id = 1;
}

// GetKeyMetadataResponse represents the response to a key metadata request
message GetKeyMetadataResponse {
    // Key ID
    string moniker = 1;
    // Threshold
    int32 threshold = 2;
    // Participants
    repeated string participants = 3;
}

// GetOperationRequest represents a request to get operation status
message GetOperationRequest {
    // Operation ID to query
    string operation_id = 1;
}

// GetOperationResponse represents the detailed status of an operation
message GetOperationResponse {
    // Operation identifier
    string operation_id = 1;
    
    // Type of operation
    OperationType type = 2;
    
    // Session ID for the operation
    string session_id = 3;
    
    // Current status
    OperationStatus status = 4;
    
    // List of participants
    repeated string participants = 5;
    
    // Timestamp when operation was created
    google.protobuf.Timestamp created_at = 6;
    
    // Timestamp when operation completed (if applicable)
    optional google.protobuf.Timestamp completed_at = 7;
    
    // Error message if operation failed
    optional string error = 8;
    
    // Operation result (one of the result types)
    oneof result {
        KeygenResult keygen_result = 9;
        SigningResult signing_result = 10;
        KeygenResult resharing_result = 11;  // Resharing produces a new key
    }
    
    // Original request (one of the request types)
    oneof request {
        StartKeygenRequest keygen_request = 12;
        StartSigningRequest signing_request = 13;
        StartResharingRequest resharing_request = 14;
    }
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/tss/v1/tss.proto

package tssv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSSService_StartKeygen_FullMethodName    = "/tss.v1.TSSService/StartKeygen"
	TSSService_StartSigning_FullMethodName   = "/tss.v1.TSSService/StartSigning"
	TSSService_StartResharing_FullMethodName = "/tss.v1.TSSService/StartResharing"
	TSSService_GetOperation_FullMethodName   = "/tss.v1.TSSService/GetOperation"
	TSSService_GetKeyMetadata_FullMethodName = "/tss.v1.TSSService/GetKeyMetadata"
)

// TSSServiceClient is the client API for TSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TSS service provides threshold signature scheme operations
type TSSServiceClient interface {
	// StartKeygen starts a new key generation operation
	StartKeygen(ctx context.Context, in *StartKeygenRequest, opts ...grpc.CallOption) (*StartKeygenResponse, error)
	// StartSigning starts a new signing operation
	StartSigning(ctx context.Context, in *StartSigningRequest, opts ...grpc.CallOption) (*StartSigningResponse, error)
	// StartResharing starts a new resharing operation
	StartResharing(ctx context.Context, in *StartResharingRequest, opts ...grpc.CallOption) (*StartResharingResponse, error)
	// GetOperation gets the status and result of an operation
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error)
	GetKeyMetadata(ctx context.Context, in *GetKeyMetadataRequest, opts ...grpc.CallOption) (*GetKeyMetadataResponse, error)
}

type tSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSSServiceClient(cc grpc.ClientConnInterface) TSSServiceClient {
	return &tSSServiceClient{cc}
}

func (c *tSSServiceClient) StartKeygen(ctx context.Context, in *StartKeygenRequest, opts ...grpc.CallOption) (*StartKeygenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartKeygenResponse)
	err := c.cc.Invoke(ctx, TSSService_StartKeygen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSSServiceClient) StartSigning(ctx context.Context, in *StartSigningRequest, opts ...grpc.CallOption) (*StartSigningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSigningResponse)
	err := c.cc.Invoke(ctx, TSSService_StartSigning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSSServiceClient) StartResharing(ctx context.Context, in *StartResharingRequest, opts ...grpc.CallOption) (*StartResharingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResharingResponse)
	err := c.cc.Invoke(ctx, TSSService_StartResharing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSSServiceClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationResponse)
	err := c.cc.Invoke(ctx, TSSService_GetOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSSServiceClient) GetKeyMetadata(ctx context.Context, in *GetKeyMetadataRequest, opts ...grpc.CallOption) (*GetKeyMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyMetadataResponse)
	err := c.cc.Invoke(ctx, TSSService_GetKeyMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSSServiceServer is the server API for TSSService service.
// All implementations must embed UnimplementedTSSServiceServer
// for forward compatibility.
//
// TSS service provides threshold signature scheme operations
type TSSServiceServer interface {
	// StartKeygen starts a new key generation operation
	StartKeygen(context.Context, *StartKeygenRequest) (*StartKeygenResponse, error)
	// StartSigning starts a new signing operation
	StartSigning(context.Context, *StartSigningRequest) (*StartSigningResponse, error)
	// StartResharing starts a new resharing operation
	StartResharing(context.Context, *StartResharingRequest) (*StartResharingResponse, error)
	// GetOperation gets the status and result of an operation
	GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error)
	GetKeyMetadata(context.Context, *GetKeyMetadataRequest) (*GetKeyMetadataResponse, error)
	mustEmbedUnimplementedTSSServiceServer()
}

// UnimplementedTSSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSSServiceServer struct{}

func (UnimplementedTSSServiceServer) StartKeygen(context.Context, *StartKeygenRequest) (*StartKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKeygen not implemented")
}
func (UnimplementedTSSServiceServer) StartSigning(context.Context, *StartSigningRequest) (*StartSigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSigning not implemented")
}
func (UnimplementedTSSServiceServer) StartResharing(context.Context, *StartResharingRequest) (*StartResharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartResharing not implemented")
}
func (UnimplementedTSSServiceServer) GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedTSSServiceServer) GetKeyMetadata(context.Context, *GetKeyMetadataRequest) (*GetKeyMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMetadata not implemented")
}
func (UnimplementedTSSServiceServer) mustEmbedUnimplementedTSSServiceServer() {}
func (UnimplementedTSSServiceServer) testEmbeddedByValue()                    {}

// UnsafeTSSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSSServiceServer will
// result in compilation errors.
type UnsafeTSSServiceServer interface {
	mustEmbedUnimplementedTSSServiceServer()
}

func RegisterTSSServiceServer(s grpc.ServiceRegistrar, srv TSSServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSSService_ServiceDesc, srv)
}

func _TSSService_StartKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).StartKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_StartKeygen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).StartKeygen(ctx, req.(*StartKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSSService_StartSigning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).StartSigning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_StartSigning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).StartSigning(ctx, req.(*StartSigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSSService_StartResharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartResharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).StartResharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_StartResharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).StartResharing(ctx, req.(*StartResharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSSService_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).GetOperation(ctx, req.(*GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSSService_GetKeyMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).GetKeyMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_GetKeyMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).GetKeyMetadata(ctx, req.(*GetKeyMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TSSService_ServiceDesc is the grpc.ServiceDesc for TSSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tss.v1.TSSService",
	HandlerType: (*TSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartKeygen",
			Handler:    _TSSService_StartKeygen_Handler,
		},
		{
			MethodName: "StartSigning",
			Handler:    _TSSService_StartSigning_Handler,
		},
		{
			MethodName: "StartResharing",
			Handler:    _TSSService_StartResharing_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _TSSService_GetOperation_Handler,
		},
		{
			MethodName: "GetKeyMetadata",
			Handler:    _TSSService_GetKeyMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tss/v1/tss.proto",
}

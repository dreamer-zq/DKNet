name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**.sh'
      - '**.yaml'
      - '**.yml'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - '**.sh'
      - '**.yaml'
      - '**.yml'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
      - 'docker-compose*.yml'

env:
  GO_VERSION: '1.23'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality checks (removed security scanning)
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=5m

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    services:
      # Add any required services here (e.g., databases)
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Build and test Docker images (commented out)
  # docker-build:
  #   name: Docker Build and Test
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Container Registry
  #     if: github.event_name != 'pull_request'
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.DOCKER_REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #         type=raw,value=latest,enable={{is_default_branch}}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       platforms: linux/amd64,linux/arm64
  #       push: ${{ github.event_name != 'pull_request' }}
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # E2E Go Tests (formerly TSS Integration Tests)
  e2e-test:
    name: E2E Go Test Suite
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Start test environment
      run: |
        docker-compose -f tests/docker/docker-compose.yaml up -d --build --wait
        echo "Waiting for a few extra seconds for services to stabilize..."
        sleep 15

    - name: Check environment status
      run: |
        docker-compose -f tests/docker/docker-compose.yaml ps

    - name: Run E2E Go tests
      run: |
        go test -v -race ./tests/e2e/...

    - name: Collect test artifacts
      if: always()
      run: |
        mkdir -p test-artifacts
        docker-compose -f tests/docker/docker-compose.yaml logs > test-artifacts/docker-logs.txt 2>/dev/null || true
        echo "Test completed at $(date)" > test-artifacts/test-summary.txt

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-artifacts
        path: test-artifacts/
        retention-days: 7

    - name: Stop test environment
      if: always()
      run: |
        docker-compose -f tests/docker/docker-compose.yaml down --volumes

    - name: Cleanup Docker resources
      if: always()
      run: |
        docker system prune -af --volumes || true

  # Performance Benchmark Tests
  performance-test:
    name: Performance Benchmark (Disabled)
    runs-on: ubuntu-latest
    needs: e2e-test # Depends on the new E2E test job
    if: false # Disabled as it relies on shell scripts that have been removed. Needs migration to Go benchmarks.
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq wget curl time

    - name: Set up Go for building
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build DKNet binaries
      run: |
        make build

    - name: Make scripts executable
      run: |
        chmod +x tests/scripts/*.sh

    - name: Start test environment
      run: |
        cd tests/scripts
        ./test-all.sh start
        sleep 90

    - name: Run performance benchmarks
      run: |
        cd tests/scripts
        echo "=== Performance Benchmark Results ===" > ../performance-results.txt
        echo "Timestamp: $(date)" >> ../performance-results.txt
        echo "" >> ../performance-results.txt
        
        # Benchmark keygen operations
        echo "--- Keygen Performance ---" >> ../performance-results.txt
        time ./test-keygen.sh test 2>&1 | tee -a ../performance-results.txt
        
        echo "" >> ../performance-results.txt
        echo "--- Signing Performance ---" >> ../performance-results.txt
        time ./test-signing.sh test 2>&1 | tee -a ../performance-results.txt

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark-results
        path: tests/performance-results.txt
        retention-days: 30

    - name: Stop test environment
      if: always()
      run: |
        cd tests/scripts
        ./test-all.sh stop

    - name: Cleanup Docker resources
      if: always()
      run: |
        docker system prune -af --volumes || true

  # Deploy to staging/production (commented out)
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: [tss-integration-test]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Deploy to staging
  #     run: |
  #       echo "Deploying to staging environment..."
  #       # Add your deployment commands here
  #       # For example:
  #       # kubectl apply -f k8s/staging/
  #       # helm upgrade --install dknet-staging ./helm-chart

  #   - name: Run smoke tests
  #     run: |
  #       echo "Running smoke tests..."
  #       # Add smoke test commands here
  #       # curl -f http://staging.example.com/health

  #   - name: Deploy to production
  #     if: success()
  #     run: |
  #       echo "Deploying to production environment..."
  #       # Add your production deployment commands here
  #       # kubectl apply -f k8s/production/
  #       # helm upgrade --install dknet-prod ./helm-chart

  #   # Slack notifications disabled - uncomment to re-enable
  #   # - name: Notify deployment status
  #   #   if: always()
  #   #   uses: 8398a7/action-slack@v3
  #   #   with:
  #   #     status: ${{ job.status }}
  #   #     channel: '#deployments'
  #   #     webhook_url: ${{ secrets.SLACK_WEBHOOK }} 